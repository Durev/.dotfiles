" Vimrc

" ======= General Mappings =======
" Leader key
let mapleader = "\<Space>"

" Always jump to first non blank character
nmap 0 ^

" Write the file with Ctrl-s
nmap <C-s> :w<cr>
imap <C-s> <esc>:w<cr>

" Move up and down by visible lines if current line is wrapped
nmap j gj
nmap k gk

" Rapid editing of vimrc
nmap <leader>vr :tabnew $MYVIMRC<cr>
nmap <leader>so :source $MYVIMRC<cr>

" Ain't nobody got time for Esc
imap jk <esc>
imap kj <esc>

" Jump to left/right split
nmap <leader><Left> <C-w>h
nmap <leader><Right> <C-w>l

" Ruby motion
nmap <leader>d [m
nmap <leader>e ]M
nmap <leader>E [M
nmap <leader>D ]m

" ======= Options =======
set nocompatible               " No need for vi compatibility - Must be setup first

syntax on                      " Enable syntax highlighting
filetype on                    " Enable filetype detection
filetype indent on             " Enable filetype-specific indenting
filetype plugin on             " Enable filetype-specific plugins

set hidden
set number relativenumber      " Hybride mode for line numbers
set backspace=indent,eol,start " Allow backspacing over everything in insert mode
set ruler                      " Show the cursor position all the time
set cursorline                 " Highlight cursorline
set splitbelow                 " Open new split panes to bottom
set splitright                 " Open new split panes to right
set directory=$HOME/.vim/tmp   " Don't clutter dirs up with swp and tmp files
set updatetime=100             " Refresh gutter and whatnot every 100ms
set nohlsearch                 " Don't keep search result highlighted
set expandtab                  " On pressing tab, insert spaces
set shiftwidth=4               " Indent with 4 spaces (if no language rule)
set autoindent                 " Copy indent from current line when starting a new line
set smartindent                " Smart autoindenting when starting a new line
set noshowmode                 " Redundant with statusline

" Display extra whitespace
set list listchars=tab:»·,trail:·,nbsp:·

" ======= Plugins =======
" Auto-install vim-plug
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
    silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-repeat'
Plug 'thoughtbot/vim-rspec'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-rails'
Plug 'vim-ruby/vim-ruby'
Plug 'tpope/vim-endwise'
Plug 'airblade/vim-gitgutter'
Plug 'Raimondi/delimitMate'
Plug 'mhinz/vim-startify'
Plug 'preservim/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'itchyny/lightline.vim'
Plug 'kaicataldo/material.vim', { 'branch': 'main' }

if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif
call plug#end()

" --- fzf ---
nnoremap <C-p> :Files<cr>
nnoremap <leader>ff :Ag<cr>

" --- RSpec.vim - save and run specs ---
map <Leader>t :w<cr> :call RunCurrentSpecFile()<cr>
map <Leader>s :w<cr> :call RunNearestSpec()<cr>
map <Leader>l :w<cr> :call RunLastSpec()<cr>

let g:rspec_runner = "os_x_iterm2"
let g:rspec_command = "Dispatch rspec {spec}"

" --- gitgutter ---
nmap <leader>hn <Plug>(GitGutterNextHunk)
nmap <leader>hl <Plug>(GitGutterPrevHunk)

" --- NERDTree ---
nnoremap <leader>nt :NERDTreeToggle<CR>
nnoremap <silent><leader>ntf :NERDTreeFind<CR>

" Open NERDTree when Vim is started without file arguments - disable startify though
" autocmd StdinReadPre * let s:std_in=1
" autocmd VimEnter * if argc() == 0 && !exists('s:std_in') | NERDTree | endif

" Close the tab if NERDTree is the only window remaining in it.
autocmd BufEnter * if winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif

let NERDTreeQuitOnOpen = 1
let NERDTreeAutoDeleteBuffer = 1
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1

" --- deoplete ---
let g:deoplete#enable_at_startup = 1

" To improve: Insert 1st suggestion and close popup instead
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ deoplete#mappings#close_popup()
function! s:check_back_space() abort "{{{
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction"}}}

" --- startify ---
let g:startify_lists = [
    \{ 'type': 'dir',       'header': ['   MRU '. getcwd()] },
    \{ 'type': 'sessions',  'header': ['   Sessions']       },
    \{ 'type': 'bookmarks', 'header': ['   Bookmarks']      },
\]

" from https://github.com/filipekiss/dotfiles/blob/7ddece0a1a4e5099146d7c96fff077c86e4d320a/config/vim/.vim/after/plugin/startify.vim
if has('nvim')
    let g:startify_ascii = [
                \ "      .            .      ",
                \ "    .,;'           :,.    ",
                \ "  .,;;;,,.         ccc;.  ",
                \ ".;c::::,,,'        ccccc: ",
                \ ".::cc::,,,,,.      cccccc.",
                \ ".cccccc;;;;;;'     llllll.",
                \ ".cccccc.,;;;;;;.   llllll.",
                \ ".cccccc  ';;;;;;'  oooooo.",
                \ "'lllllc   .;;;;;;;.oooooo'",
                \ "'lllllc     ,::::::looooo'",
                \ "'llllll      .:::::lloddd'",
                \ ".looool       .;::coooodo.",
                \ "  .cool         'ccoooc.  ",
                \ "    .co          .:o:.    ",
                \ "      .           .'      ",
                \]
else
    let g:startify_ascii = [
                \ '     ________ ;;     ________',
                \ '    /********\;;;;  /********\',
                \ '    \********/;;;;;;\********/',
                \ '     |******|;;;;;;;;/*****/',
                \ '     |******|;;;;;;/*****/''',
                \ '    ;|******|;;;;/*****/'';',
                \ '  ;;;|******|;;/*****/'';;;;;',
                \ ';;;;;|******|/*****/'';;;;;;;;;',
                \ '  ;;;|***********/'';;;;;;;;;',
                \ '    ;|*********/'';;;;;;;;;',
                \ '     |*******/'';;;;;;;;;',
                \ '     |*****/'';;;;;;;;;',
                \ '     |***/'';;;;;;;;;',
                \ '     |*/''   ;;;;;;',
                \ '              ;;',
                \]
endif

let g:startify_custom_header = g:startify_ascii

let g:startify_bookmarks = [
    \{ 'd': '$DOTFILES' },
    \{ 's': '$SSERVER' },
    \{ 'l': '$SETL' },
\]

" ======= Color scheme & Statusline =======
if (has('termguicolors'))
    set termguicolors
endif

" default lightline colorscheme provide greater contrast - Stay minimal for now
let g:lightline = {
    \ 'colorscheme': 'material_vim',
    \ 'active': {
    \   'left': [ [ 'mode', 'paste' ],
    \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
    \ },
    \ 'component_function': {
    \   'gitbranch': 'FugitiveHead'
    \ },
    \ }

" Fix italics in Vim
if !has('nvim')
  let &t_ZH="\e[3m"
  let &t_ZR="\e[23m"
endif

let g:material_terminal_italics = 1
let g:material_theme_style = 'default'

colorscheme material

" gitgutter colors
highlight GitGutterDelete guifg=#E74C3C
highlight GitGutterChange guifg=#F1C40F
highlight GitGutterAdd guifg=#27AE60
highlight clear SignColumn
